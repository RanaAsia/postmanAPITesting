{
	"info": {
		"_postman_id": "83276e8f-2ed3-46c7-8202-b3eef70e5bfc",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38427527"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"\r",
							"console.log(response.status);\r",
							"console.log(response['status']);\r",
							"\r",
							"pm.test(\"Status should be OK\",() =>{\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"postman.setNextRequest (\"Get List of books\");\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 200ms\", function () {\r",
							"//   pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Response has the required fields\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"    \r",
							"//     pm.expect(responseData).to.be.an('object');\r",
							"//     pm.expect(responseData.status).to.exist;\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Status is a non-empty string\", function () {\r",
							"//   const responseData = pm.response.json();\r",
							"  \r",
							"//   pm.expect(responseData).to.be.an('object');\r",
							"//   pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Content-Type header is application/json\", function () {\r",
							"//     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"const response =pm.response.json();\r",
							"\r",
							"const nonFictionBooks =response.filter((book)=> book.available === true);\r",
							"\r",
							"const book =nonFictionBooks[0];\r",
							"\r",
							"if(book){\r",
							"    pm.globals.set(\"bookId\",book.id);   /// even if the value after book.available is not defined it will work (book.available === 111)\r",
							"}\r",
							"//(1)//console.log(response[1].id);\r",
							"//(2)//console.log(nonFictionBooks[0]);\r",
							"\r",
							"// pm.test(\"Book found\", ()=> {\r",
							"//     pm.expect(book).to.be.an('object');\r",
							"//     pm.expect(book.available).to.be.true;\r",
							"//     pm.expect(book.available).to.eql(true);\r",
							"// });\r",
							"//(2)//  pm.globals.set(\"bookId\", nonFictionBooks[0].id);\r",
							"//pm.globals.set(\"bookId\",book.id);\r",
							"\r",
							"/////////////////write an expectation to expact that thr book is of type:non-fiction\r",
							"pm.test(\"Book found\", ()=> {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"    pm.expect(book.type).to.eql(\"non-fiction\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books?type=non-fiction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "limit",
							"value": "4",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Statuse code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response =pm.response.json();\r",
							"\r",
							"pm.test(\"Is in stock\", ()=>{\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"    \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:bookId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order book(require auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response =pm.response.json();\r",
							"pm.collectionVariables.set(\"orderId\",response.orderId);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":1,\r\n    \"customerName\":\"John\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All books",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//     \"bookId\":1,\r\n//     \"customerName\":\"John\"\r\n\r\n// }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":1,\r\n    \"customerName\":\"John\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\":\"John {{$randomLastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"postman.setNextRequest(\"Get List of books\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order book with random name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - created and orderId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.created).to.exist;\r",
							"    pm.expect(responseData.orderId).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 300ms\", function () {\r",
							"//   pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"Created field is a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.created).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"OrderId must be a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should be a non-empty string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n     \"bookId\":{{bookId}},\r\n    \"customerName\":\"{{$randomFullName}}\"\r\n\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post visible book",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":2,\r\n    \"customerName\":\"John\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							" const response=pm.response.json();\r",
							"\r",
							"// pm.globals.set(\"accessToken\", response.accessToken); //in Global Variable\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"accessToken\", response.accessToken); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer{{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clientName\": \"{{$randomFirstName}}\",\r\n  \"clientEmail\":\"{{$randomEmail}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					],
					"query": [
						{
							"key": "accessToken",
							"value": "{{$accessToken}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		}
	]
}